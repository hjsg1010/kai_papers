"""Public interface for the paper processor package."""
from __future__ import annotations

from .api import app
from .config import (
    CONFLUENCE_API_TOKEN,
    CONFLUENCE_EMAIL,
    CONFLUENCE_SPACE_KEY,
    CONFLUENCE_URL,
    DOCPAMIN_API_KEY,
    DOCPAMIN_BASE_URL,
    DOCPAMIN_CRT_FILE,
    LLM_API_KEY,
    LLM_BASE_URL,
    LLM_MAX_TOKENS,
    LLM_MODEL,
    MAX_WORKERS,
    S3_BUCKET,
    S3_PAPERS_PREFIX,
    logger,
)
from .confluence import upload_to_confluence
from .docpamin import (
    extract_title_from_markdown,
    extract_title_from_url,
    get_docpamin_cache_key,
    load_docpamin_cache_from_s3,
    parse_pdf_with_docpamin,
    parse_pdf_with_docpamin_url,
    save_docpamin_cache_to_s3,
)
from .images import (
    extract_base64_images,
    extract_figure_pairs_from_json,
    is_valid_caption,
    match_images_with_captions_from_json,
    match_images_with_figure_pairs,
    process_markdown_images,
    remove_base64_images,
    select_representative_image,
    select_representative_image_with_llm,
    select_representative_images,
)
from .markdown import build_markdown, derive_week_label, format_summary_as_markdown
from .models import (
    BatchProcessRequest,
    DebugParseS3Request,
    DebugSummarizeMarkdownRequest,
    DebugSummarizeSectionsRequest,
    PaperAnalysis,
    S3PapersRequest,
)
from .s3_utils import _preview, download_pdf_from_s3, get_paper_list_from_s3, get_s3_papers
from .summary import (
    analyze_paper_with_llm,
    analyze_paper_with_llm_improved,
    create_hierarchical_summary_v2,
    summarize_chunk_with_overlap,
)

__all__ = [
    "app",
    "analyze_paper_with_llm",
    "analyze_paper_with_llm_improved",
    "BatchProcessRequest",
    "build_markdown",
    "CONFLUENCE_API_TOKEN",
    "CONFLUENCE_EMAIL",
    "CONFLUENCE_SPACE_KEY",
    "CONFLUENCE_URL",
    "create_hierarchical_summary_v2",
    "DebugParseS3Request",
    "DebugSummarizeMarkdownRequest",
    "DebugSummarizeSectionsRequest",
    "derive_week_label",
    "download_pdf_from_s3",
    "DOCPAMIN_API_KEY",
    "DOCPAMIN_BASE_URL",
    "DOCPAMIN_CRT_FILE",
    "extract_base64_images",
    "extract_figure_pairs_from_json",
    "extract_title_from_markdown",
    "extract_title_from_url",
    "format_summary_as_markdown",
    "get_docpamin_cache_key",
    "get_paper_list_from_s3",
    "get_s3_papers",
    "is_valid_caption",
    "LLM_API_KEY",
    "LLM_BASE_URL",
    "LLM_MAX_TOKENS",
    "LLM_MODEL",
    "load_docpamin_cache_from_s3",
    "match_images_with_captions_from_json",
    "match_images_with_figure_pairs",
    "MAX_WORKERS",
    "PaperAnalysis",
    "parse_pdf_with_docpamin",
    "parse_pdf_with_docpamin_url",
    "process_markdown_images",
    "remove_base64_images",
    "S3_BUCKET",
    "S3PapersRequest",
    "S3_PAPERS_PREFIX",
    "save_docpamin_cache_to_s3",
    "select_representative_image",
    "select_representative_image_with_llm",
    "select_representative_images",
    "summarize_chunk_with_overlap",
    "upload_to_confluence",
    "_preview",
    "logger",
]
